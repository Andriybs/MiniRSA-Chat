package chat;

import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;

/**
 * This is a simple command-line based chat client. When it is run, it must be 
 * run as either a server or a client, and only one server and one client can 
 * connect. To run the program:
 * <p>Server: <code>java ChatClient -s &lt;port number&gt;</code><br>
 * Client: <code>java ChatClient -c &lt;host&gt;:%lt;port number&gt;</code></p>
 * 
 * @author Robert Li, Evan Schoenbach
 * @version April 19, 2012
 */
public class ChatClient {

    private InetAddress host;
    private int port;
    
    /**
     * Creates a ChatClient with a null host and the specified port number, as 
     * for a server.
     * 
     * @param port the port number to connect on.
     */
    public ChatClient(int port) {
        this(null, port);
    }
    
    /**
     * Creates a ChatClient with the specified host and port number, as for a 
     * client.
     * 
     * @param host the host to connect to.
     * @param port the port to connect to.
     */
    public ChatClient(String host, int port) {
        this.port = port;
        try {
            this.host = InetAddress.getByName(host);
        } catch (Exception e) {
            System.err.println("Host error");
            e.printStackTrace();
            System.exit(-1);
        }
    }
    
    /**
     * Initializes the server by listening and accepting a connection on the 
     * specified port.
     */
    private void startServer() {
        System.out.println("Server listening on port " + port + ".");
        ServerSocket serverSocket;
        Socket clientSocket = null;
        try {
            serverSocket = new ServerSocket(port);
            clientSocket = serverSocket.accept();
        } catch (Exception e) {
            System.err.println("Connection error");
            e.printStackTrace();
            System.exit(-1);
        }
        System.out.println("Server connected.");
        createThreads(clientSocket);
    }
    
    /**
     * Initializes a client by connecting to the previously specified host and 
     * port.
     */
    private void startClient() {
        System.out.println("Client attempting to connect to " + 
                           host + ":" + port + ".");
        Socket serverSocket = null;
        try {
            serverSocket = new Socket(host, port);
        } catch (Exception e) {
            System.err.println("Connection error");
            e.printStackTrace();
            System.exit(-1);
        }
        System.out.println("Client connected.");
        createThreads(serverSocket);
    }
    
    /**
     * Creates the reader and writer threads.
     * 
     * @param socket the connected socket to read and write from.
     */
    private void createThreads(Socket socket) {
        // TODO Get and send RSA key
        Thread reader = new Thread(new ReaderThread(socket, 0, 0));
        reader.start();
        
        Thread writer = new Thread(new WriterThread(socket, 0, 0));
        writer.start();
    }
    
    public static void main(String args[]) {
        if (args.length != 2) {
            printUsage();
        }
        
        int port = 8484;
        String host = "localhost";

        if (args[0].equals("-s")) { // server
            try {
                port = Integer.parseInt(args[1]);
            } catch (Exception e) {
                printUsage();
            }
            ChatClient client = new ChatClient(port);
            client.startServer();
        } else if (args[0].equals("-c")) { // client
            String[] parts = args[1].split(":");
            if (parts.length != 2) {
                printUsage();
            }
            try {
                port = Integer.parseInt(parts[1]);
            } catch (Exception e) {
                printUsage();
            }
            host = parts[0];
            ChatClient client = new ChatClient(host, port);
            client.startClient();
        } else {
            printUsage();
        }
    }
    
    /**
     * Prints directions on how to use the program.
     */
    private static void printUsage() {
        System.err.println("USAGE");
        System.err.println("Server: java ChatClient -s <port number>");
        System.err.println("Client: java ChatClient -c <host>:<port number>");
        System.exit(-1);
    }
}
